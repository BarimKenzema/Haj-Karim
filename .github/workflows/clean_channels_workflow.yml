name: Clean Telegram Channels

on:
  workflow_dispatch:

jobs:
  clean-channels:
    # THIS PERMISSIONS BLOCK IS THE FIX
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4

      - name: Create and Run Anonymous Cleanup Script
        run: |
          # This script is fine, no changes needed here
          cat > anonymous_cleanup.py << EOL
          import json
          import os
          from datetime import datetime, timedelta, timezone
          import requests
          from bs4 import BeautifulSoup
          import time
          import random

          DAYS_OF_INACTIVITY_LIMIT = 4

          def main():
              print("--- Anonymous Telegram Channel Checker ---")
              try:
                  with open('telegram channels.json', 'r', encoding='utf-8') as f:
                      channels_to_check = json.load(f)
              except FileNotFoundError:
                  print("FATAL: 'telegram channels.json' not found."); exit(1)
              
              print(f"Found {len(channels_to_check)} channels to check...")
              active_channels, inactive_channels, invalid_channels = [], [], []
              time_limit = datetime.now(timezone.utc) - timedelta(days=DAYS_OF_INACTIVITY_LIMIT)

              for i, channel_username in enumerate(channels_to_check):
                  print(f"Checking {i+1}/{len(channels_to_check)}: @{channel_username} ... ", end="", flush=True)
                  try:
                      headers = {'User-Agent': 'Mozilla/5.0'}
                      response = requests.get(f"https://t.me/s/{channel_username}", timeout=15, headers=headers)
                      if response.status_code != 200:
                          print(f"Invalid (Status: {response.status_code}).")
                          invalid_channels.append(channel_username)
                          continue
                      soup = BeautifulSoup(response.text, "html.parser")
                      time_tag = soup.select_one('.tgme_widget_message_date time')
                      if not time_tag or datetime.fromisoformat(time_tag['datetime']).astimezone(timezone.utc) < time_limit:
                          print(f"Inactive.")
                          inactive_channels.append(channel_username)
                      else:
                          print("Active.")
                          active_channels.append(channel_username)
                      time.sleep(random.uniform(0.5, 1.5))
                  except Exception as e:
                      print(f"Error: {e}")
                      invalid_channels.append(channel_username)

              print("\n--- Cleanup Complete ---")
              print(f"Total: {len(channels_to_check)} | Kept: {len(active_channels)}")
              with open('telegram channels.json', 'w', encoding='utf-8') as f:
                  json.dump(sorted(active_channels), f, indent=4)
              print("\nSUCCESS: 'telegram channels.json' has been overwritten.")

          if __name__ == "__main__":
              main()
          EOL
          
          python anonymous_cleanup.py

      - name: Commit and push the cleaned channel list
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ðŸ”§ Cleaned Telegram channel list"
          file_pattern: "telegram channels.json"
